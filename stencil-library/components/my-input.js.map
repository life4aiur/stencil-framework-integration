{"file":"my-input.js","mappings":";;AAAA,MAAM,UAAU,GAAG,sBAAsB,CAAC;AAC1C,sBAAe,UAAU;;MCSZA,SAAO;;;;;;;;;;QAiGV,WAAM,GAAG,CAAC,EAAc;YAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACtB,CAAC;QAEM,YAAO,GAAG,CAAC,EAAc;YAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACvB,CAAC;wBA/FiB,KAAK;wBAKL,KAAK;;;;;;IA+Cd,YAAY;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAY,EAAE,KAAK,EAAE,CAAC,CAAC;KACzD;IAED,MAAM,iBAAiB;QACrB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;KACnC;IAED,YAAY,CAAC,KAAK;QAChB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAY,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC,QAAQ,EAAE,CAAC;KACjB;IAED,WAAW,CAAC,KAAK;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAY,EAAE,KAAK,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,EAAE,CAAC;KACjB;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,WAAW,CACxB;YACE,QAAQ,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;YAC7C,OAAO,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE;YAC7C,QAAQ,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;YAC7C,YAAY,EAAE,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK;SAC3C,EACD,0BAA0B,CAC3B,CAAC;;QAGF,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;KACjC;IAUO,WAAW;QACjB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAE1B,QACE,EAAC,IAAI,QACH,aACE,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAC3C,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,OAAO,EAAE,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GACzC,CACG,EACP;KACH;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;KAC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["MyInput"],"sources":["src/components/my-input/my-input.css?tag=my-input&encapsulation=shadow","src/components/my-input/my-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import type { EventEmitter } from '@stencil/core';\nimport { AttachInternals, Component, Element, Event, Host, Prop, Watch, h } from '@stencil/core';\nimport type { InputChangeEventDetail, InputInputEventDetail } from './input-interface';\n\n@Component({\n  tag: 'my-input',\n  styleUrl: 'my-input.css',\n  shadow: true,\n  formAssociated: true,\n})\nexport class MyInput {\n  @Element() el!: HTMLMyInputElement;\n\n  @AttachInternals() internals: ElementInternals;\n\n  /**\n   * If `true`, the user cannot interact with the input.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * If `true`, the user must fill in a value before submitting a form.\n   */\n  @Prop() required = false;\n\n  /**\n   * The value of the input.\n   */\n  @Prop() value: string;\n\n  /**\n   * The `myInput` event is fired each time the user modifies the input's value.\n   * Unlike the `myChange` event, the `myInput` event is fired for each alteration\n   * to the input's value. This typically happens for each keystroke as the user types.\n   *\n   * For elements that accept text input (`type=text`, `type=tel`, etc.), the interface\n   * is [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent); for others,\n   * the interface is [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). If\n   * the input is cleared on edit, the type is `null`.\n   */\n  @Event() myInput!: EventEmitter<InputInputEventDetail>;\n\n  /**\n   * The `myChange` event is fired when the user modifies the input's value.\n   * Unlike the `myInput` event, the `myChange` event is only fired when changes\n   * are committed, not as the user types.\n   *\n   * Depending on the way the users interacts with the element, the `myChange`\n   * event fires at a different moment:\n   * - When the user commits the change explicitly (e.g. by selecting a date\n   * from a date picker for `<my-input type=\"date\">`, pressing the \"Enter\" key, etc.).\n   * - When the element loses focus after its value has changed: for elements\n   * where the user's interaction is typing.\n   */\n  @Event() myChange!: EventEmitter<InputChangeEventDetail>;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event() myBlur!: EventEmitter<FocusEvent>;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event() myFocus!: EventEmitter<FocusEvent>;\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    this.myChange.emit({ value: this.value as any, event });\n  }\n\n  async componentWillLoad(): Promise<void> {\n    this.internals.setFormValue(null);\n  }\n\n  handleChange(event): void {\n    this.value = event.target.value;\n    this.internals.setFormValue(this.value);\n    this.myChange.emit({ value: this.value as any, event });\n    this.validate();\n  }\n\n  handleInput(event): void {\n    this.value = event.target.value;\n    this.internals.setFormValue(this.value);\n    this.myInput.emit({ value: this.value as any, event });\n    this.validate();\n  }\n\n  validate(): void {\n    this.internals.setValidity(\n      {\n        badInput: this.value && /\\d/.test(this.value),\n        tooLong: this.value && this.value.length > 10,\n        tooShort: this.value && this.value.length < 2,\n        valueMissing: this.required && !this.value,\n      },\n      'This is an invalid value',\n    );\n\n    // This will flag the form fields as invalid for the browser to handle natively, it will also emit an `input` event\n    this.internals.reportValidity();\n  }\n\n  private onBlur = (ev: FocusEvent) => {\n    this.myBlur.emit(ev);\n  };\n\n  private onFocus = (ev: FocusEvent) => {\n    this.myFocus.emit(ev);\n  };\n\n  private renderInput() {\n    const { disabled } = this;\n\n    return (\n      <Host>\n        <input\n          value={this.value}\n          disabled={disabled}\n          required={this.required}\n          type=\"text\"\n          onChange={event => this.handleChange(event)}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          onInput={event => this.handleInput(event)}\n        />\n      </Host>\n    );\n  }\n\n  render() {\n    return this.renderInput();\n  }\n}\n"],"version":3}