{"file":"my-checkbox.js","mappings":";;AAAA,MAAM,aAAa,GAAG,sBAAsB,CAAC;AAC7C,yBAAe,aAAa;;MCiBfA,YAAU;;;;;;;;;;;;;;QAmDb,eAAU,GAAG,CAAC,KAAc;YAClC,MAAM,SAAS,IAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACjB,OAAO,EAAE,SAAS;gBAClB,KAAK,EAAE,IAAI,CAAC,KAAK;aAClB,CAAC,CAAC;SACJ,CAAC;QAEM,kBAAa,GAAG,CAAC,EAAS;YAChC,EAAE,CAAC,cAAc,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC5B,CAAC;QAEM,YAAO,GAAG;YAChB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACrB,CAAC;QAEM,WAAM,GAAG;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACpB,CAAC;QAEM,YAAO,GAAG,CAAC,EAAc;YAC/B,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YAED,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;SACxB,CAAC;uBAzEiC,KAAK;6BAKC,KAAK;wBAK3B,KAAK;qBASI,IAAI;;IAwDhC,MAAM;QACJ,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;KAC9B;IAEO,cAAc;QACpB,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;QAElD,QACE,EAAC,IAAI,IAAC,OAAO,EAAE,IAAI,CAAC,OAAO,IACzB,aACE,IAAI,EAAC,UAAU,EACf,aAAa,EAAE,aAAa,EAC5B,OAAO,EAAE,OAAO,GAAG,IAAI,GAAG,SAAS,EACnC,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,IAAI,CAAC,aAAa,EAC5B,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,EAC7B,MAAM,EAAE,MAAM,IAAI,CAAC,MAAM,EAAE,GAC3B,CACG,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["MyCheckbox"],"sources":["src/components/my-checkbox/my-checkbox.css?tag=my-checkbox&encapsulation=shadow","src/components/my-checkbox/my-checkbox.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import type { EventEmitter } from '@stencil/core';\nimport { Component, Element, Event, Host, Prop, h } from '@stencil/core';\nimport type { CheckboxChangeEventDetail } from './checkbox-interface';\n\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - The label text to associate with the checkbox. Use the \"labelPlacement\" property to control where the label is placed relative to the checkbox.\n *\n * @part container - The container for the checkbox mark.\n * @part label - The label text describing the checkbox.\n * @part mark - The checkmark used to indicate the checked state.\n */\n@Component({\n  tag: 'my-checkbox',\n  styleUrl: 'my-checkbox.css',\n  shadow: true,\n})\nexport class MyCheckbox {\n  @Element() el!: HTMLMyCheckboxElement;\n\n  /**\n   * If `true`, the checkbox is selected.\n   */\n  @Prop({ mutable: true }) checked = false;\n\n  /**\n   * If `true`, the checkbox will visually appear as indeterminate.\n   */\n  @Prop({ mutable: true }) indeterminate = false;\n\n  /**\n   * If `true`, the user cannot interact with the checkbox.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * The value of the checkbox does not mean if it's checked or not, use the `checked`\n   * property for that.\n   *\n   * The value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\n   * it's only used when the checkbox participates in a native `<form>`.\n   */\n  @Prop() value: any | null = 'on';\n\n  /**\n   * Emitted when the checked property has changed\n   * as a result of a user action such as a click.\n   * This event will not emit when programmatically\n   * setting the checked property.\n   */\n  @Event() myChange!: EventEmitter<CheckboxChangeEventDetail>;\n\n  /**\n   * Emitted when the checkbox has focus.\n   */\n  @Event() myFocus!: EventEmitter<void>;\n\n  /**\n   * Emitted when the checkbox loses focus.\n   */\n  @Event() myBlur!: EventEmitter<void>;\n\n  /**\n   * Sets the checked property and emits\n   * the myChange event. Use this to update the\n   * checked state in response to user-generated\n   * actions such as a click.\n   */\n  private setChecked = (state: boolean) => {\n    const isChecked = (this.checked = state);\n    this.myChange.emit({\n      checked: isChecked,\n      value: this.value,\n    });\n  };\n\n  private toggleChecked = (ev: Event) => {\n    ev.preventDefault();\n    this.setChecked(!this.checked);\n    this.indeterminate = false;\n  };\n\n  private onFocus = () => {\n    this.myFocus.emit();\n  };\n\n  private onBlur = () => {\n    this.myBlur.emit();\n  };\n\n  private onClick = (ev: MouseEvent) => {\n    if (this.disabled) {\n      return;\n    }\n\n    this.toggleChecked(ev);\n  };\n\n  render() {\n    return this.renderCheckbox();\n  }\n\n  private renderCheckbox() {\n    const { checked, disabled, indeterminate } = this;\n\n    return (\n      <Host onClick={this.onClick}>\n        <input\n          type=\"checkbox\"\n          indeterminate={indeterminate}\n          checked={checked ? true : undefined}\n          disabled={disabled}\n          onChange={this.toggleChecked}\n          onFocus={() => this.onFocus()}\n          onBlur={() => this.onBlur()}\n        />\n      </Host>\n    );\n  }\n}\n"],"version":3}