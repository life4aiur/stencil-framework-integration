{"file":"my-text-area.js","mappings":";;AAAA,MAAM,aAAa,GAAG,sBAAsB,CAAC;AAC7C,yBAAe,aAAa;;MCOfA,YAAU;;;;;;;;;QA4Cb,YAAO,GAAG,CAAC,EAAc;YAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACvB,CAAC;QAEM,WAAM,GAAG,CAAC,EAAc;YAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACtB,CAAC;QAEM,aAAQ,GAAG,CAAC,EAAS;YAC3B,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;SAC1B,CAAC;QAEM,YAAO,GAAG,CAAC,EAAS;YAC1B,MAAM,KAAK,GAAG,EAAE,CAAC,MAAoC,CAAC;YACtD,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;aAChC;YACD,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;SAC1B,CAAC;qBAxD+C,EAAE;;;;;IAMzC,YAAY;QACpB,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,EAAE;YAC9C,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;SAC3B;KACF;IAsBO,QAAQ;QACd,OAAO,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;KACzB;;;;;;;IA4BO,eAAe,CAAC,KAAa;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;;QAEvB,MAAM,QAAQ,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;KAChD;;;;IAKO,eAAe,CAAC,KAAa;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;KACrC;IAED,MAAM;QACJ,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE9B,QACE,EAAC,IAAI,uDACH,iEAAU,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,IACrI,KAAK,CACG,CACN,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["MyTextArea"],"sources":["src/components/my-text-area/my-text-area.css?tag=my-text-area&encapsulation=shadow","src/components/my-text-area/my-text-area.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Event, EventEmitter, Host, Prop, Watch, h } from '@stencil/core';\nimport { TextareaChangeEventDetail, TextareaInputEventDetail } from './textarea-interface';\n\n@Component({\n  tag: 'my-text-area',\n  styleUrl: 'my-text-area.css',\n  shadow: true,\n})\nexport class MyTextArea {\n  private nativeInput?: HTMLTextAreaElement;\n\n  /**\n   * The value of the textarea.\n   */\n  @Prop({ mutable: true }) value?: string | null = '';\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    const nativeInput = this.nativeInput;\n    const value = this.getValue();\n    if (nativeInput && nativeInput.value !== value) {\n      nativeInput.value = value;\n    }\n  }\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event() myBlur!: EventEmitter<FocusEvent>;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event() myFocus!: EventEmitter<FocusEvent>;\n\n  /**\n   * The `myChange` event is fired when the user modifies the textarea's value.\n   */\n  @Event() myChange!: EventEmitter<TextareaChangeEventDetail>;\n\n  /**\n   * The `myInput` event is fired when the user modifies the textarea's value.\n   */\n  @Event() myInput!: EventEmitter<TextareaInputEventDetail>;\n\n  private getValue(): string {\n    return this.value || '';\n  }\n\n  private onFocus = (ev: FocusEvent) => {\n    this.myFocus.emit(ev);\n  };\n\n  private onBlur = (ev: FocusEvent) => {\n    this.myBlur.emit(ev);\n  };\n\n  private onChange = (ev: Event) => {\n    this.emitValueChange(ev);\n  };\n\n  private onInput = (ev: Event) => {\n    const input = ev.target as HTMLTextAreaElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    this.emitInputChange(ev);\n  };\n\n  /**\n   * Emits an `myChange` event.\n   *\n   * This API should be called for user committed changes.\n   * This API should not be used for external value changes.\n   */\n  private emitValueChange(event?: Event) {\n    const { value } = this;\n    // Checks for both null and undefined values\n    const newValue = value == null ? value : value.toString();\n    this.myChange.emit({ value: newValue, event });\n  }\n\n  /**\n   * Emits an `myInput` event.\n   */\n  private emitInputChange(event?: Event) {\n    const { value } = this;\n    this.myInput.emit({ value, event });\n  }\n\n  render() {\n    const value = this.getValue();\n\n    return (\n      <Host>\n        <textarea ref={el => (this.nativeInput = el)} onChange={this.onChange} onInput={this.onInput} onBlur={this.onBlur} onFocus={this.onFocus}>\n          {value}\n        </textarea>\n      </Host>\n    );\n  }\n}\n"],"version":3}